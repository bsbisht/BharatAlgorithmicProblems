import java.util.Stack;
/*Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

*/
class ValidParenthesis {
    public boolean isValid(String s) {
        
       Stack<Character> stack = new Stack<Character>();
        char[] arr = s.toCharArray();
        for(int i = 0 ; i < arr.length;i++)
        {
        	if(arr[i] == '(' || arr[i] == '{' || arr[i] == '[')
        	{
        		stack.push(arr[i]);
        	}	
        	else if(arr[i] == ')' || arr[i] == '}' || arr[i] == ']')
            {
                char currChar = arr[i];
                if(!stack.isEmpty())
                {    
                char lastChar = stack.peek();
                if(((currChar == ')' && lastChar == '(')
                   || (currChar == '}' && lastChar == '{')
                   || (currChar == ']' && lastChar == '[')))
                {
                    stack.pop();
                }
                else{
                    
                    return false;
                    }
                }
                else
                {
                    return false;
                }
            }else
            {
            	return false;
            }
        }
        
        if(stack.isEmpty())
        {
        	return true;
        }else
        {
        	return false;
        }    
    }
}
